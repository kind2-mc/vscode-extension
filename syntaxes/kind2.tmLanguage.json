{
	"scopeName": "source.kind2",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#numbers"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.kind2",
					"match": "\\b(if|else|let|tel|node|contract|returns)\\b"
				},
				{
					"match": "\\b(true|false|and|or|not|xor|div|mod|pre|current|when|last|bool|int|real|map|red|fill|struct|int8|int16|int32|int64|function|type|const|extern|unsafe|contract|automaton|state|assume|require|enum|guarantee|ensure|import|mode|unless|until|restart|resume|merge|activate|every|initial|node|returns|if|then|else|var|PROPERTY|let|tel|condact|assert|check|MAIN)\\b",
					"name": "keyword.other.kind2"
				},
				{
					"match": "(<<|>>>?|~|\\^)",
					"name": "keyword.operator.bitwise.kind2"
				},
				{
					"match": "((&|\\^|\\||<<|>>>?)=)",
					"name": "keyword.operator.assignment.bitwise.kind2"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.kind2"
				},
				{
					"match": "([+*/-]=)",
					"name": "keyword.operator.assignment.arithmetic.kind2"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment.kind2"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.kind2"
				},
				{
					"match": "(\\-|\\+|\\*|\\/)",
					"name": "keyword.operator.arithmetic.kind2"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.kind2"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.kind2"
				},
				{
					"match": "\\b(const|goto)\\b",
					"name": "keyword.reserved.kind2"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.kind2",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.kind2",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "--.*\\n",
					"name": "comment.other.kind2"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.language.kind2"
				},
				{
					"match": "\\bpre\\b",
					"name": "variable.language.pre.kind2"
				},
				{
					"match": "\\bsuper\\b",
					"name": "variable.language.kind2"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.kind2"
				},
				{
					"match": "0bin[01][01]*",
					"name": "constant.numeric.binary.kind2"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.kind2"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.kind2"
				}
			]
		}
	}
}